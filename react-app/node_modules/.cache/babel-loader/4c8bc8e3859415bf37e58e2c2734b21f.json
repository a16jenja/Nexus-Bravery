{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nmodule.exports = count;\n\nfunction count(src, opts, cb) {\n  if (typeof opts === 'function') return count(src, {}, opts);\n  src = parse(src);\n  opts = Object.assign({}, opts);\n  var totalStats = opts._stats || {\n    files: 0,\n    dirs: 0,\n    bytes: 0\n  };\n  if (!opts._stats) opts._stats = totalStats;\n  if (!opts.ignore) opts.ignore = function () {\n    return false;\n  };\n  src.fs.readdir(src.name, function (err, list) {\n    if (err && err.code === 'ENOTDIR' || !list || !list.length) return countFile(); // Single file\n\n    if (err) return cb(err);\n    var pending = list.length;\n    if (!pending) return cb(null, totalStats);\n    list.forEach(function (file) {\n      file = path.resolve(src.name, file);\n\n      if (opts.ignore(file)) {\n        if (! --pending) cb(null, totalStats);\n        return;\n      }\n\n      stat(src.fs, file, function (err, st) {\n        if (err) return cb(err);\n\n        if (st && st.isDirectory()) {\n          totalStats.dirs++; // Uses opts._stats to add to total\n\n          count({\n            name: file,\n            fs: src.fs\n          }, opts, function (err, cnt) {\n            if (err) return cb(err);\n            if (! --pending) cb(null, totalStats);\n          });\n        } else {\n          totalStats.files++;\n          if (st) totalStats.bytes += st.size;\n          if (! --pending) cb(null, totalStats);\n        }\n      });\n    });\n  });\n  return totalStats;\n\n  function stat(fs, name, cb) {\n    if (opts.dereference) fs.stat(name, cb);else fs.lstat(name, cb);\n  }\n\n  function countFile() {\n    // src === a single file, just count that\n    stat(src.fs, src.name, function (err, st) {\n      if (err) return cb(err);\n      totalStats.files++;\n      totalStats.bytes += st.size;\n      cb(null, totalStats);\n    });\n  }\n\n  function parse(name) {\n    if (typeof name === 'string') return {\n      name: path.resolve(name),\n      fs: fs\n    };\n    name.name = path.resolve(name.name);\n    if (!name.fs) name.fs = fs;\n    return name;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}